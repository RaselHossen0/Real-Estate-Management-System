package realEstate;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.fxml.Initializable;import javafx.scene.Node;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.Label;import javafx.scene.control.TableColumn;import javafx.scene.control.TableView;import javafx.scene.control.cell.PropertyValueFactory;import javafx.stage.Stage;import realEstate.classes.Property;import realEstate.classes.PropertyManager;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.net.URL;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.ResourceBundle;public class InAreaResult implements Initializable {    Stage stage;    Scene scene;    @FXML    void addCustomer(ActionEvent event) {    }    @FXML    void toAvailability(ActionEvent event) {    }        @FXML        Label test;        @FXML        private TableColumn<Property, String> sellerNameCol;        @FXML        private TableColumn<Property, String> locationCol;        @FXML        private TableColumn<Property, Integer> priceCol;        @FXML        private TableColumn<Property, Integer> serialCol;        @FXML        private TableColumn<Property, String> districtCol;        @FXML        private TableColumn<Property, String> typeCol;        @FXML        private TableView<Property> table;        ObservableList<Property> list = FXCollections.observableArrayList();        void search () throws FileNotFoundException {            try {                BufferedReader reader = new BufferedReader(new FileReader("inArea.txt"));                String whole = reader.readLine();                ArrayList<String> row = new ArrayList<String>(20);  //to store all info of a user                row.add((Arrays.toString(whole.split("/"))));                String[] splitString = row.get(0).replaceAll("\\[", "").replaceAll("\\]", "").split(", ");                String district = splitString[0];                String location = splitString[1];                List<Property> list1;                PropertyManager.retrieve();                list1 = PropertyManager.getArea(district,location);                list.addAll(list1);                reader.close();            } catch (Exception e) {                System.out.println(e);            }        }        public void initialize (URL location, ResourceBundle resources){            try {                search();            } catch (FileNotFoundException e) {                throw new RuntimeException(e);            }            locationCol.setCellValueFactory(new PropertyValueFactory<Property, String>("location"));            sellerNameCol.setCellValueFactory(new PropertyValueFactory<Property, String>("sellerName"));            serialCol.setCellValueFactory(new PropertyValueFactory<Property, Integer>("propertyID"));            priceCol.setCellValueFactory(new PropertyValueFactory<Property, Integer>("price"));            districtCol.setCellValueFactory(new PropertyValueFactory<Property, String>("district"));            typeCol.setCellValueFactory(new PropertyValueFactory<Property, String>("type"));            table.setItems(list);        }        @FXML        void dashBoard (ActionEvent event) throws IOException {            FXMLLoader loader=new FXMLLoader(getClass().getResource("DashBoard.fxml"));            Parent root = loader.load();            DashBoard ds=loader.getController();            Integer totProp= PropertyManager.getTotalProperties();            ds.listeddPropLabel.setText(String.valueOf(totProp));            stage = (Stage) ((Node) event.getSource()).getScene().getWindow();            scene = new Scene(root);            stage.setScene(scene);            stage.show();        }    @FXML    void addProperty(ActionEvent event) throws IOException {        Parent root = FXMLLoader.load(getClass().getResource("AddProperty.fxml"));        stage = (Stage) ((Node) event.getSource()).getScene().getWindow();        scene = new Scene(root);        stage.setScene(scene);        stage.show();    }    @FXML    void byArea(ActionEvent event) throws IOException {        Parent root = FXMLLoader.load(getClass().getResource("inArea.fxml"));        stage = (Stage) ((Node) event.getSource()).getScene().getWindow();        scene = new Scene(root);        stage.setScene(scene);        stage.show();    }    @FXML    void byType(ActionEvent event) throws IOException {        Parent root = FXMLLoader.load(getClass().getResource("byType.fxml"));        stage = (Stage) ((Node) event.getSource()).getScene().getWindow();        scene = new Scene(root);        stage.setScene(scene);        stage.show();    }    @FXML    void loanCalc(ActionEvent event) throws IOException {        Parent root = FXMLLoader.load(getClass().getResource("loanCalc.fxml"));        stage = (Stage) ((Node) event.getSource()).getScene().getWindow();        scene = new Scene(root);        stage.setScene(scene);        stage.show();    }    @FXML    void removeProperty(ActionEvent event) throws IOException {        Parent root = FXMLLoader.load(getClass().getResource("removeProp.fxml"));        stage = (Stage) ((Node) event.getSource()).getScene().getWindow();        scene = new Scene(root);        stage.setScene(scene);        stage.show();    }    @FXML    void editProperty(ActionEvent event) throws IOException {        Parent root = FXMLLoader.load(getClass().getResource("editProperty.fxml"));        stage = (Stage) ((Node) event.getSource()).getScene().getWindow();        scene = new Scene(root);        stage.setScene(scene);        stage.show();    }}